alias MPI_Comm void*
alias MPI_Datatype void*
alias MPI_Op void*
alias MPI_Status void*

alias MPI_COMM_WORLD mpi_comm_world
alias MPI_INT mpi_int
alias MPI_CHAR mpi_char
alias MPI_BYTE mpi_byte
alias MPI_LONG mpi_long
alias MPI_FLOAT mpi_float
alias MPI_DOUBLE mpi_double
alias MPI_HALF mpi_half
alias MPI_BOOL mpi_bool

alias MPI_MAX mpi_max
alias MPI_MIN mpi_min
alias MPI_SUM mpi_sum
alias MPI_PROD mpi_prod
alias MPI_LAND mpi_land
alias MPI_BAND mpi_band
alias MPI_LOR mpi_lor
alias MPI_BOR mpi_bor
alias MPI_LXOR mpi_lxor
alias MPI_BXOR mpi_bxor
alias MPI_MINLOC mpi_minloc
alias MPI_MAXLOC mpi_maxloc
alias MPI_REPLACE mpi_replace
alias MPI_NO_OP mpi_no_op


@extern
MPI_Comm mpi_comm_world

@extern
MPI_Datatype mpi_int
@extern
MPI_Datatype mpi_char
@extern
MPI_Datatype mpi_byte
@extern
MPI_Datatype mpi_long
@extern
MPI_Datatype mpi_float
@extern
MPI_Datatype mpi_double
@extern
MPI_Datatype mpi_half
@extern
MPI_Datatype mpi_bool

@extern
MPI_Op mpi_max
@extern
MPI_Op mpi_min
@extern
MPI_Op mpi_sum
@extern
MPI_Op mpi_prod
@extern
MPI_Op mpi_land
@extern
MPI_Op mpi_band
@extern
MPI_Op mpi_lor
@extern
MPI_Op mpi_bor
@extern
MPI_Op mpi_lxor
@extern
MPI_Op mpi_bxor
@extern
MPI_Op mpi_minloc
@extern
MPI_Op mpi_maxloc
@extern
MPI_Op mpi_replace
@extern
MPI_Op mpi_no_op

@extern
def int __init_mpi(void* a, void* b)

def int MPI_Init(void* a, void* b):
    return __init_mpi(a,b)

@extern
def int MPI_Finalize()

@extern
def int MPI_Comm_rank(MPI_Comm comm, int* world_rank)

@extern
def int MPI_Comm_size(MPI_Comm comm, int* world_size)

@extern
def int MPI_Dims_create(int world_size, int ndims, int* dims)

@extern
def int MPI_Type_contiguous(int count, MPI_Datatype base_type, MPI_Datatype* newtype)

@extern
def int MPI_Type_commit(MPI_Datatype* newtype)

@extern
def int MPI_Type_free(MPI_Datatype* newtype)

@extern
def int MPI_Sendrecv(void* sendbuf, int sendcount, MPI_Datatype sendtype, int dest, int sendtag, void* recvbuff, int recvcount, MPI_Datatype recvtype, int source, int recvtag, MPI_Comm comm, MPI_Status* status)

@extern
def int MPI_Barrier(MPI_Comm comm)

module mpi:
    MPI_Comm comm_world
    int world_size
    int world_rank

    def int init(void* a, void* b):
        out = MPI_Init(a,b)
        if out != 0:
            return out
        mpi.comm_world = MPI_COMM_WORLD
        MPI_Comm_rank(mpi.comm_world,&mpi.world_rank)
        MPI_Comm_size(mpi.comm_world,&mpi.world_size)
        return out
        
    def int init():
        return mpi.init(NULL,NULL)
    
    def int finalize():
        return MPI_Finalize()
    
    def int[:] dims_create(int size, int ndims):
        int[:] out = new int[ndims]
        MPI_Dims_create(size,ndims,int*(out))
        return out

    def int[:] dims_create(int ndims):
        int[:] out = new int[ndims]
        MPI_Dims_create(mpi.world_size,ndims,int*(out))
        return out
    
    def MPI_Datatype type_contiguous(int size):
        MPI_Datatype new_t
        MPI_Type_contiguous(size,MPI_BYTE,&new_t)
        MPI_Type_commit(&new_t)
        return new_t

    def int type_free(MPI_Datatype new_t):
        MPI_Datatype tmp = new_t
        return MPI_Type_free(&tmp)
    
    def int barrier(MPI_Comm comm):
        return MPI_Barrier(comm)

    def int sendrecv(char[:] sendbuf, int sendcount, int dest, int sendtag, char[:] recvbuf, int recvcount, int source, int recvtag, MPI_Comm comm):
        void* sendbufptr = void*(sendbuf)
        void* recvbufptr = void*(recvbuf)
        MPI_Status* tmp = NULL
        return MPI_Sendrecv(sendbufptr,sendcount,MPI_CHAR,dest,sendtag,recvbufptr,recvcount,MPI_CHAR,source,recvtag,comm,tmp)
    
    def int sendrecv(int[:] sendbuf, int sendcount, int dest, int sendtag, int[:] recvbuf, int recvcount, int source, int recvtag, MPI_Comm comm):
        void* sendbufptr = void*(sendbuf)
        void* recvbufptr = void*(recvbuf)
        MPI_Status* tmp = NULL
        return MPI_Sendrecv(sendbufptr,sendcount,MPI_INT,dest,sendtag,recvbufptr,recvcount,MPI_INT,source,recvtag,comm,tmp)

    def int sendrecv(long[:] sendbuf, int sendcount, int dest, int sendtag, long[:] recvbuf, int recvcount, int source, int recvtag, MPI_Comm comm):
        void* sendbufptr = void*(sendbuf)
        void* recvbufptr = void*(recvbuf)
        MPI_Status* tmp = NULL
        return MPI_Sendrecv(sendbufptr,sendcount,MPI_LONG,dest,sendtag,recvbufptr,recvcount,MPI_LONG,source,recvtag,comm,tmp)

    def int sendrecv(half[:] sendbuf, int sendcount, int dest, int sendtag, half[:] recvbuf, int recvcount, int source, int recvtag, MPI_Comm comm):
        void* sendbufptr = void*(sendbuf)
        void* recvbufptr = void*(recvbuf)
        MPI_Status* tmp = NULL
        MPI_Datatype half_t = mpi.type_contiguous(sizeof(half))
        out = MPI_Sendrecv(sendbufptr,sendcount,half_t,dest,sendtag,recvbufptr,recvcount,half_t,source,recvtag,comm,tmp)
        mpi.type_free(half_t)
        return out

    def int sendrecv(float[:] sendbuf, int sendcount, int dest, int sendtag, float[:] recvbuf, int recvcount, int source, int recvtag, MPI_Comm comm):
        void* sendbufptr = void*(sendbuf)
        void* recvbufptr = void*(recvbuf)
        MPI_Status* tmp = NULL
        return MPI_Sendrecv(sendbufptr,sendcount,MPI_FLOAT,dest,sendtag,recvbufptr,recvcount,MPI_FLOAT,source,recvtag,comm,tmp)

    def int sendrecv(double[:] sendbuf, int sendcount, int dest, int sendtag, double[:] recvbuf, int recvcount, int source, int recvtag, MPI_Comm comm):
        void* sendbufptr = void*(sendbuf)
        void* recvbufptr = void*(recvbuf)
        MPI_Status* tmp = NULL
        return MPI_Sendrecv(sendbufptr,sendcount,MPI_DOUBLE,dest,sendtag,recvbufptr,recvcount,MPI_DOUBLE,source,recvtag,comm,tmp)