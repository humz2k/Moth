@template
class rawArray[T]:
    T* raw
    int _len
    int __itercount
    
    def T* __index__(rawArray[T] self, int* index, int n):
        return __intr_itop(__intr_ptoi(self.raw,long) + long(__intr_gep(index,0) * sizeof(T)),T*)

    def void __print__(rawArray[T] self):
        #print('[',__nonewln)
        __intr_oup("[")
        int count = 0
        while (count < (self._len-2)):
            #print(self[count],',',__nonewln)
            print(self[count],__nonewln)
            __intr_oup(",")
            count = count + 1
        count = count + 1
        print(self[count],__nonewln)
        __intr_oup("]")

    def void __iterget__(rawArray[T] self):
        self.__itercount = 0

    def bool __itercheck__(rawArray[T] self):
        return (self.__itercount < self._len)

    def T __iternext__(rawArray[T] self):
        T out = self[self.__itercount]
        self.__itercount = self.__itercount + 1
        return out

    def void __init__(rawArray[T] self, int size):
        self.raw = alloc(sizeof(T)*size)
        self._len = size

    def rawArray[T] zero(rawArray[T] self):
        int count = 0
        while count < self._len:
            self[count] = 0
            count = count + 1
        return self

    def rawArray[T] set_all(rawArray[T] self, T val):
        int count = 0
        while count < self._len:
            self[count] = val
            count = count + 1
        return self

    def int len(rawArray[T] self):
        return self._len

def cast rawArray[int] (__rangeiter val):
    rawArray[int] out = new rawArray[int](val._len)
    int count = 0
    for int i in val:
        out[count] = i
        count = count + 1
    return out