include <time.moth>
include <rand.moth>
include <math.moth>
include <io.moth>

def kernel zero[i: arr.dims[0]](float3[:] arr):
    arr[i] = [0,0,0]

def kernel one[i: arr.dims[0]](float[:] arr):
    arr[i] = 1

def kernel init_particles[i: arr.dims[0]](float3[:] arr):
    arr[i] = [random.rand()*3,random.rand()*3,random.rand()*3]

@parallel
def kernel calc_force[i: pos.dims[0]](float3[:] pos, float3[:] acc, float[:] mass):
    my_particle = pos[i]
    total = [0.0f,0.0f,0.0f]
    for j in range(pos.dims[0]):
        if j != i:
            delta = pos[j] - my_particle
            dist2 = delta[0]**2 + delta[1]**2 + delta[2]**2
            float force = mass[j]/sqrtf(dist2*dist2*dist2)
            total += delta * force
    acc[i] = total

#@parallel
def kernel add2D[idx: a.dims[0]](float3[:] a, float3[:] b, float mul):
    a[idx] += b[idx] * mul

def void writedata(str filename, float3[:] data):
    f = open(filename,"a+")
    f.write("----\n")
    for i in data:
        str line = str(i[0]) + "," + str(i[1]) + "," + str(i[2]) + "\n"
        f.write(line)
    f.close()

def int main():
    np = 100000
    nsteps = 1
    dt = 0.05f*0.5
    pos = new float3[np]
    vel = new float3[np]
    acc = new float3[np]
    mass = new float[np]
    zero(vel)
    zero(acc)
    one(mass)
    init_particles(pos)
    
    f = open("data","w+")
    f.close()
    writedata("data",pos)
    start = CPUTimer()
    calc_force(pos,acc,mass)
    add2D(vel,acc,0.5*dt)
    add2D(pos,vel,dt)
    writedata("data",pos)
    for i in range(nsteps):
        calc_force(pos,acc,mass)
        add2D(vel,acc,dt)
        add2D(pos,vel,dt)
        writedata("data",pos)
    end = CPUTimer()
    print(clock_to_sec(end-start))
    return 0