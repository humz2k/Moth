include <mpi>
include <fftw>
include distribution

class Dfft:
    object Distribution dist
    int nFFTs
    int[:] n
    plan f12
    plan b12
    def void __init__(object Distribution in_dist):
        dist = in_dist
    
    def void make_plans(double[:,:] buff1, double[:,:] buff2):
        nFFTs = dist.nlocal/dist.ng
        n = nm.zeros(1)
        n[0] = dist.ng
        f12 = fftw.plan_many_dft(1,n,nFFTs,buff1,NULL,1,dist.ng,buff2,NULL,1,dist.ng,fftw.forward(),fftw.measure())
        b12 = fftw.plan_many_dft(1,n,nFFTs,buff1,NULL,1,dist.ng,buff2,NULL,1,dist.ng,fftw.backward(),fftw.measure())

    def void forward(double[:,:] buff1, double[:,:] buff2):
        dist.getZPencils(buff1,buff2)
        fftw.execute(f12)
        dist.returnZPencils(buff1,buff2)
        dist.getXPencils(buff1,buff2)
        fftw.execute(f12)
        dist.returnXPencils(buff1,buff2)
        dist.getYPencils(buff1,buff2)
        fftw.execute(f12)
        dist.returnYPencils(buff1,buff2)

    def void backward(double[:,:] buff1, double[:,:] buff2):
        dist.getZPencils(buff1,buff2)
        fftw.execute(b12)
        dist.returnZPencils(buff1,buff2)
        dist.getXPencils(buff1,buff2)
        fftw.execute(b12)
        dist.returnXPencils(buff1,buff2)
        dist.getYPencils(buff1,buff2)
        fftw.execute(b12)
        dist.returnYPencils(buff1,buff2)

    def void finalize():
        fftw.destroy_plan(f12)
        fftw.destroy_plan(b12)
        dist.finalize()