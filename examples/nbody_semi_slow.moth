include <numoth>
include <math>
include <timer>

def kernel calc_acc[ij: parts.shape[0],parts.shape[0]](float[:,:] parts, float[:,:] out):
    float diffx = parts[j,0] - parts[i,0]
    float diffy = parts[j,1] - parts[i,1]
    float diffz = parts[j,2] - parts[i,2]

    float dist2 = (diffx**2 + diffy**2 + diffz**2)
    if (dist2 != 0):
        float rdist2 = 1/dist2
        out[i,0] += rdist2 * diffx
        out[i,1] += rdist2 * diffy
        out[i,2] += rdist2 * diffz

def kernel add[i: f.shape[0]](float[:,:] f, float[:,:] s, float mul):
    s[i,0] += f[i,0] * mul
    s[i,1] += f[i,1] * mul
    s[i,2] += f[i,2] * mul

def void test():
    pass

def int main():
    float dt = 0.005
    int nsteps = 10
    int np = 100
    float[:,:] pos = nm.arange(np*3).reshape(np,3)
    float[:,:] acc = nm.zeros((np,3))
    float[:,:] vel = nm.zeros((np,3))
    int start = timer.clock()
    calc_acc(pos,acc)
    for int i in range(nsteps):
        add(acc,vel,0.5*dt)
        add(vel,pos,dt)
        acc.zero()
        calc_acc(pos,acc)
        add(acc,vel,0.5*dt)
    int end = timer.clock()
    print(pos)
    print(timer.to_seconds(end-start),"seconds\n")
        #print(pos)
    #print(acc)
    return 0