@template
class rawArray[T]:
    T* raw
    int len
    int __itercount
    
    def T* __index__(rawArray[T] self, int* index, int n):
        return __intr_itop(__intr_ptoi(self.raw,long) + long(__intr_gep(index,0) * sizeof(T)),T*)

    def void __print__(rawArray[T] self):
        #print('[',__nonewln)
        __intr_oup("[")
        int count = 0
        while (count < (self.len-2)):
            #print(self[count],',',__nonewln)
            print(self[count],__nonewln)
            __intr_oup(",")
            count = count + 1
        count = count + 1
        print(self[count],__nonewln)
        __intr_oup("]")

    def void __iterget__(rawArray[T] self):
        self.__itercount = 0

    def bool __itercheck__(rawArray[T] self):
        return (self.__itercount < self.len)

    def T __iternext__(rawArray[T] self):
        T out = self[self.__itercount]
        self.__itercount = self.__itercount + 1
        return out

    def void __init__(rawArray[T] self, int size):
        self.raw = alloc(sizeof(T)*size)
        self.len = size

    def rawArray[T] zero(rawArray[T] self):
        int count = 0
        while count < self.len:
            self[count] = 0
            count = count + 1
        return self

    def rawArray[T] set_to(rawArray[T] self, T val):
        int count = 0
        while count < self.len:
            self[count] = val
            count = count + 1
        return self

def int main():
    #rawArray[int] = new rawArray[int](10)
    rawArray[int] test = new rawArray[int](10)
    test.set_to(10)
    print(test)
    #int* a = alloc(10*sizeof(int))
    #__intr_gep(a,0) = 5
    #print(__intr_gep(a,0))
    #int a = 1
    #while a < 5:
    #    print(a)
    #    int b = a
    #    while b >= 0:
    #        print(b)
    #        b = b - 1
    #    a = a + 1
    #    break
    return 0