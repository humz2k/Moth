cinclude <string.h>

class string(type):
    char[:] raw
    int length

    def void __init__(string self, __c_type(__c_raw("const char *")) input):
        self.length = __c_call(strlen,__c_val(input))
        self.raw = array(self.length + 1)
        __c_call(strcpy,__c_ptr(self.raw),__c_val(input))

    def void __print__(string self):
        __c_call(printf,__c_lit("%s"),__c_ptr(self.raw))

    def void __free__(string self):
        free(self.raw)

    def void set_idx(string self, int index, __c_type(__c_raw("const char *")) input):
        self.raw[index] = __c_raw(__c_raw("",__c_val(input)),__c_raw("[0]"))

    def void set(string self, __c_type(__c_raw("const char *")) input):
        free(self.raw)
        self.length = __c_call(strlen,__c_val(input))
        self.raw = array(self.length + 1)
        __c_call(strcpy,__c_ptr(self.raw),__c_val(input))

    def string get_slice(string self, int start, int end):
        int new_len = end - start
        string new_string = new string("")
        free(new_string.raw)
        new_string.length = new_len
        new_string.raw = array(new_len + 1)
        new_string.raw[new_len] = self.raw[self.length]
        for int i in range(new_len):
            new_string.raw[i] = self.raw[i+start]
        return new_string
    
    def void slice(string self, int start, int end):
        int new_len = end - start
        char[:] new_raw = array(new_len + 1)
        new_raw[new_len] = self.raw[self.length]
        for int i in range(new_len):
            new_raw[i] = self.raw[i+start]
        free(self.raw)
        self.raw = new_raw
        self.length = new_len

    def void copy(string self, string other):
        free(self.raw)
        self.length = other.length
        self.raw = array(self.length+1)
        for int i in range(self.length+1):
            self.raw[i] = other.raw[i]
    
    def string __copy__(string self):
        string output = new string("")
        output.copy(self)
        return output

    def string __addself__(string self, string other):
        int new_len = self.length + other.length
        char[:] new_raw = array(new_len + 1)
        int i
        for i in range(self.length):
            new_raw[i] = self.raw[i]
        for i in range(other.length + 1):
            new_raw[i+self.length] = other.raw[i]
        free(self.raw)
        self.length = new_len
        self.raw = new_raw
        return self

    def string __add__(string self, string other):
        string output = new string("")
        output.copy(self)
        return output.add(other)
    
    def string __mulself__(string self, int amount):
        int new_len = self.length * amount
        char[:] new_raw = array(new_len + 1)
        new_raw[new_len] = self.raw[self.length]
        for int i in range(amount):
            int start = self.length * i
            for int j in range(self.length):
                new_raw[j + start] = self.raw[j]
        free(self.raw)
        self.length = new_len
        self.raw = new_raw
        return self

    def string __mul__(string self, string other):
        string output = new string("")
        output.copy(self)
        return output.add(other)