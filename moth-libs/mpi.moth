cinclude <mpi.h>

class mpi_comm(type):
    __c_type(MPI_Comm) raw_comm
    def void __init__(mpi_comm self, __c_type(MPI_Comm) w_comm):
        self.raw_comm = w_comm

class mpi(static):
    def void init(int[:] argc, char[:] argv):
        __c_call(MPI_Init,__c_lit(NULL),__c_lit(NULL))

    def int comm_size(mpi_comm w_comm):
        int world_size = 0
        __c_call(MPI_Comm_size,__c_val(w_comm.raw_comm),__c_ptr(world_size))
        return world_size
    
    #def int comm_rank(object MPI self, object comm w_comm):
    #    int world_rank = 0
    #    __c_call(MPI_Comm_rank,__c_val(w_comm.raw_comm),__c_ptr(world_rank))
    #    return world_rank
    
    #def int[:] dims_create(object MPI self, int world_size, int ndims):
    #    int[:] dims = array(world_size)
    #    for int i in range(world_size):
    #        dims[i] = 0
    #    __c_call(MPI_Dims_create,__c_val(world_size),__c_val(ndims),__c_ptr(dims))
    #    return dims
    
    #def void type_contiguous(object MPI self, int size, object mpi_datatype type):
    #    __c_call(MPI_Type_contiguous,__c_val(size),__c_lit(MPI_BYTE),__c_ptr(type.raw_type))
    
    #def void type_commit(object MPI self, object mpi_datatype type):
    #    __c_call(MPI_Type_commit,__c_ptr(type.raw_type))

    #def void barrier(object MPI self, object comm w_comm):
    #    __c_call(MPI_Barrier,__c_val(w_comm.raw_comm))

    #def void alltoall(object MPI self, double[:,:] input, int nsends1, object mpi_datatype type1, double[:,:] output, int nsends2, object mpi_datatype type2, object comm w_comm):
    #    __c_call(MPI_Alltoall,__c_ptr(input),__c_val(nsends1),__c_val(type1.raw_type),__c_ptr(output),__c_val(nsends2),__c_val(type2.raw_type),__c_val(w_comm.raw_comm))

    #def void __free__(object MPI self):
    #    pass
    
    def void finalize():
        __c_call(MPI_Finalize)