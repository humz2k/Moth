cinclude <mpi.h>

class mpi_datatype(type):
    __c_type(MPI_Datatype) raw_type

    def void set(__c_type(MPI_Datatype) input):
        raw_type = input

class mpi_comm(type):
    __c_type(MPI_Comm) raw_comm
    def void __init__(__c_type(MPI_Comm) w_comm):
        raw_comm = w_comm

class mpi_op(type):
    __c_type(MPI_Op) raw_op
    def void __init__(__c_type(MPI_Op) w_op):
        raw_op = w_op

class mpi_allreduce:
    def void __init__():
        pass
    
    @overload
    def double min(double val, mpi_comm w_comm):
        double inp = val
        double out = 0
        __c_call(MPI_Allreduce,__c_ptr(inp),__c_ptr(out),__c_val(1),__c_lit(MPI_DOUBLE),__c_lit(MPI_MIN),__c_val(w_comm.raw_comm))
        return out

    @overload
    def double max(double val, mpi_comm w_comm):
        double inp = val
        double out = 0
        __c_call(MPI_Allreduce,__c_ptr(inp),__c_ptr(out),__c_val(1),__c_lit(MPI_DOUBLE),__c_lit(MPI_MAX),__c_val(w_comm.raw_comm))
        return out

    @overload
    def double sum(double val, mpi_comm w_comm):
        double inp = val
        double out = 0
        __c_call(MPI_Allreduce,__c_ptr(inp),__c_ptr(out),__c_val(1),__c_lit(MPI_DOUBLE),__c_lit(MPI_SUM),__c_val(w_comm.raw_comm))
        return out

class mpi(static):

    mpi_comm mpi.comm_world
    object mpi_allreduce mpi.reduce

    def void __init__():
        mpi.comm_world = new mpi_comm(__c_lit(MPI_COMM_WORLD))
        mpi.reduce = new mpi_allreduce()

    @overload
    def void init(int[:] argc, char[:] argv):
        __c_call(MPI_Init,__c_lit(NULL),__c_lit(NULL))

    @overload
    def void init():
        __c_call(MPI_Init,__c_lit(NULL),__c_lit(NULL))

    #def mpi_comm get_comm_world():
    #    mpi_comm out = new mpi_comm(__c_lit(MPI_COMM_WORLD))
    #    return out

    def mpi_op op_min():
        mpi_op out = new mpi_op(__c_lit(MPI_MIN))
        return out

    def mpi_op op_max():
        mpi_op out = new mpi_op(__c_lit(MPI_MAX))
        return out
    
    def mpi_op op_sum():
        mpi_op out = new mpi_op(__c_lit(MPI_SUM))
        return out

    def mpi_datatype doublet():
        mpi_datatype out
        out.set(__c_lit(MPI_DOUBLE))
        return out

    def int comm_size(mpi_comm w_comm):
        int world_size = 0
        __c_call(MPI_Comm_size,__c_val(w_comm.raw_comm),__c_ptr(world_size))
        return world_size
    
    def int comm_rank(mpi_comm w_comm):
        int world_rank = 0
        __c_call(MPI_Comm_rank,__c_val(w_comm.raw_comm),__c_ptr(world_rank))
        return world_rank
    
    def int[:] dims_create(int world_size, int ndims):
        int[:] dims = int array(ndims)
        dims.zero()
        __c_call(MPI_Dims_create,__c_val(world_size),__c_val(ndims),__c_ptr(dims))
        return dims
    
    def mpi_datatype type_contiguous(int size):
        mpi_datatype mpitype
        __c_call(MPI_Type_contiguous,__c_val(size),__c_lit(MPI_BYTE),__c_ptr(mpitype.raw_type))
        __c_call(MPI_Type_commit,__c_ptr(mpitype.raw_type))
        return mpitype
    
    def void type_commit(mpi_datatype mpitype):
        __c_call(MPI_Type_commit,__c_ptr(mpitype.raw_type))

    def void type_free(mpi_datatype mpitype):
        __c_call(MPI_Type_free,__c_ptr(mpitype.raw_type))

    def void barrier(mpi_comm w_comm):
        __c_call(MPI_Barrier,__c_val(w_comm.raw_comm))

    @overload
    def void alltoall(double[:] input, int nsends1, mpi_datatype type1, double[:] output, int nsends2, mpi_datatype type2, mpi_comm w_comm):
        __c_call(MPI_Alltoall,__c_ptr(input),__c_val(nsends1),__c_val(type1.raw_type),__c_ptr(output),__c_val(nsends2),__c_val(type2.raw_type),__c_val(w_comm.raw_comm))

    @overload
    def void alltoall(int[:] input, int nsends1, mpi_datatype type1, int[:] output, int nsends2, mpi_datatype type2, mpi_comm w_comm):
        __c_call(MPI_Alltoall,__c_ptr(input),__c_val(nsends1),__c_val(type1.raw_type),__c_ptr(output),__c_val(nsends2),__c_val(type2.raw_type),__c_val(w_comm.raw_comm))
    
    @overload
    def void allreduce(double[:] sendbuff, double[:] recvbuff, int count, mpi_datatype datat, mpi_op w_op, mpi_comm w_comm):
        __c_call(MPI_Allreduce,__c_ptr(sendbuff),__c_ptr(recvbuff),__c_val(count),__c_val(datat.raw_type),__c_val(w_op.raw_op),__c_val(w_comm.raw_comm))

    #@overload
    #def double allmin(double val, mpi_comm w_comm):
    #    double inp = val
    #    double out = 0
    #    __c_call(MPI_Allreduce,__c_ptr(inp),__c_ptr(out),__c_val(1),__c_lit(MPI_DOUBLE),__c_lit(MPI_MIN),__c_val(w_comm.raw_comm))
    #    return out

    #@overload
    #def double allmax(double val, mpi_comm w_comm):
    #    double inp = val
    #    double out = 0
    #    __c_call(MPI_Allreduce,__c_ptr(inp),__c_ptr(out),__c_val(1),__c_lit(MPI_DOUBLE),__c_lit(MPI_MAX),__c_val(w_comm.raw_comm))
    #    return out

    #@overload
    #def double allsum(double val, mpi_comm w_comm):
    #    double inp = val
    #    double out = 0
    #    __c_call(MPI_Allreduce,__c_ptr(inp),__c_ptr(out),__c_val(1),__c_lit(MPI_DOUBLE),__c_lit(MPI_SUM),__c_val(w_comm.raw_comm))
    #    return out

    def double wtime():
        return __c_call(MPI_Wtime)

    def void finalize():
        __c_call(MPI_Finalize)