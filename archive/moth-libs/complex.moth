class complex(static):

    def complexd cmplx(double real, double imag):
        return real + I*imag

    def complexf cmplxf(float real, float imag):
        return real + I*imag

    #def double real(complexd inp):
    #    return __c_call(creal,__c_val(inp))

    #def float realf(complexf inp):
    #    return __c_call(crealf,__c_val(inp))

    #def double imag(complexd inp):
    #    return __c_call(cimag,__c_val(inp))

    #def float imagf(complexf inp):
    #    return __c_call(cimagf,__c_val(inp))

    #def double abs(complexd inp):
    #    return __c_call(cabs,__c_val(inp))

    #def float absf(complexf inp):
    #    return __c_call(cabsf,__c_val(inp))

    #def double arg(complexd inp):
    #    return __c_call(carg,__c_val(inp))

    #def float argf(complexf inp):
    #    return __c_call(cargf,__c_val(inp))
    
    #def complexd conj(complexd inp):
    #    return __c_call(conj,__c_val(inp))

    #def complexf conjf(complexf inp):
    #    return __c_call(conjf,__c_val(inp))

    #def complexd proj(complexd inp):
    #    return __c_call(cproj,__c_val(inp))

    #def complexf projf(complexf inp):
    #    return __c_call(cprojf,__c_val(inp))

