@inline
def cast bool* (char* ptr):
    return __intr_itop(__intr_ptoi(ptr,long),bool*)

@inline
def cast int* (char* ptr):
    return __intr_itop(__intr_ptoi(ptr,long),int*)

@inline
def cast long* (char* ptr):
    return __intr_itop(__intr_ptoi(ptr,long),long*)

@inline
def cast half* (char* ptr):
    return __intr_itop(__intr_ptoi(ptr,long),half*)

@inline
def cast float* (char* ptr):
    return __intr_itop(__intr_ptoi(ptr,long),float*)

@inline
def cast double* (char* ptr):
    return __intr_itop(__intr_ptoi(ptr,long),double*)

@inline
def cast bool (char a):
    return __intr_trunc(a,bool)

@inline
def cast bool (int a):
    return __intr_trunc(a,bool)

@inline
def cast bool (long a):
    return __intr_trunc(a,bool)

@inline
def cast char (bool a):
    return __intr_ext(a,char)

@inline
def cast char (int a):
    return __intr_trunc(a,char)

@inline
def cast char (long a):
    return __intr_trunc(a,char)

@inline
def cast int (bool a):
    return __intr_ext(a,int)

@inline
def cast int (char a):
    return __intr_ext(a,int)

@inline
def cast int (long a):
    return __intr_trunc(a,int)

@inline
def cast int (half a):
    return __intr_ftoi(a,int)

@inline
def cast int (float a):
    return __intr_ftoi(a,int)

@inline
def cast int (double a):
    return __intr_ftoi(a,int)

@inline
def cast long (bool a):
    return __intr_ext(a,long)

@inline
def cast long (char a):
    return __intr_ext(a,long)

@inline
def cast long (int a):
    return __intr_ext(a,long)

@inline
def cast long (half a):
    return __intr_ftoi(a,long)

@inline
def cast long (float a):
    return __intr_ftoi(a,long)

@inline
def cast long (double a):
    return __intr_ftoi(a,long)

@inline
def cast half (int a):
    return __intr_itof(a,half)

@inline
def cast half (long a):
    return __intr_itof(a,half)

@inline
def cast half (float a):
    return __intr_ftrunc(a,half)

@inline
def cast half (double a):
    return __intr_ftrunc(a,half)

@inline
def cast float (int a):
    return __intr_itof(a,float)

@inline
def cast float (long a):
    return __intr_itof(a,float)

@inline
def cast float (half a):
    return __intr_fext(a,float)

@inline
def cast float (double a):
    return __intr_ftrunc(a,float)

@inline
def cast double (int a):
    return __intr_itof(a,double)

@inline
def cast double (long a):
    return __intr_itof(a,double)

@inline
def cast double (half a):
    return __intr_fext(a,double)

@inline
def cast double (float a):
    return __intr_fext(a,double)

@inline
def char __add__(char left, bool right):
    return __intr_add(char(left),char(right))

@inline
def char __add__(bool left, char right):
    return __intr_add(char(left),char(right))

@inline
def char __add__(char left, char right):
    return __intr_add(char(left),char(right))

@inline
def int __add__(int left, bool right):
    return __intr_add(int(left),int(right))

@inline
def int __add__(bool left, int right):
    return __intr_add(int(left),int(right))

@inline
def int __add__(int left, char right):
    return __intr_add(int(left),int(right))

@inline
def int __add__(char left, int right):
    return __intr_add(int(left),int(right))

@inline
def int __add__(int left, int right):
    return __intr_add(int(left),int(right))

@inline
def long __add__(long left, bool right):
    return __intr_add(long(left),long(right))

@inline
def long __add__(bool left, long right):
    return __intr_add(long(left),long(right))

@inline
def long __add__(long left, char right):
    return __intr_add(long(left),long(right))

@inline
def long __add__(char left, long right):
    return __intr_add(long(left),long(right))

@inline
def long __add__(long left, int right):
    return __intr_add(long(left),long(right))

@inline
def long __add__(int left, long right):
    return __intr_add(long(left),long(right))

@inline
def long __add__(long left, long right):
    return __intr_add(long(left),long(right))

@inline
def char __sub__(char left, bool right):
    return __intr_sub(char(left),char(right))

@inline
def char __sub__(bool left, char right):
    return __intr_sub(char(left),char(right))

@inline
def char __sub__(char left, char right):
    return __intr_sub(char(left),char(right))

@inline
def int __sub__(int left, bool right):
    return __intr_sub(int(left),int(right))

@inline
def int __sub__(bool left, int right):
    return __intr_sub(int(left),int(right))

@inline
def int __sub__(int left, char right):
    return __intr_sub(int(left),int(right))

@inline
def int __sub__(char left, int right):
    return __intr_sub(int(left),int(right))

@inline
def int __sub__(int left, int right):
    return __intr_sub(int(left),int(right))

@inline
def long __sub__(long left, bool right):
    return __intr_sub(long(left),long(right))

@inline
def long __sub__(bool left, long right):
    return __intr_sub(long(left),long(right))

@inline
def long __sub__(long left, char right):
    return __intr_sub(long(left),long(right))

@inline
def long __sub__(char left, long right):
    return __intr_sub(long(left),long(right))

@inline
def long __sub__(long left, int right):
    return __intr_sub(long(left),long(right))

@inline
def long __sub__(int left, long right):
    return __intr_sub(long(left),long(right))

@inline
def long __sub__(long left, long right):
    return __intr_sub(long(left),long(right))

@inline
def char __mul__(char left, bool right):
    return __intr_mul(char(left),char(right))

@inline
def char __mul__(bool left, char right):
    return __intr_mul(char(left),char(right))

@inline
def char __mul__(char left, char right):
    return __intr_mul(char(left),char(right))

@inline
def int __mul__(int left, bool right):
    return __intr_mul(int(left),int(right))

@inline
def int __mul__(bool left, int right):
    return __intr_mul(int(left),int(right))

@inline
def int __mul__(int left, char right):
    return __intr_mul(int(left),int(right))

@inline
def int __mul__(char left, int right):
    return __intr_mul(int(left),int(right))

@inline
def int __mul__(int left, int right):
    return __intr_mul(int(left),int(right))

@inline
def long __mul__(long left, bool right):
    return __intr_mul(long(left),long(right))

@inline
def long __mul__(bool left, long right):
    return __intr_mul(long(left),long(right))

@inline
def long __mul__(long left, char right):
    return __intr_mul(long(left),long(right))

@inline
def long __mul__(char left, long right):
    return __intr_mul(long(left),long(right))

@inline
def long __mul__(long left, int right):
    return __intr_mul(long(left),long(right))

@inline
def long __mul__(int left, long right):
    return __intr_mul(long(left),long(right))

@inline
def long __mul__(long left, long right):
    return __intr_mul(long(left),long(right))

@inline
def char __div__(char left, bool right):
    return __intr_div(char(left),char(right))

@inline
def char __div__(bool left, char right):
    return __intr_div(char(left),char(right))

@inline
def char __div__(char left, char right):
    return __intr_div(char(left),char(right))

@inline
def int __div__(int left, bool right):
    return __intr_div(int(left),int(right))

@inline
def int __div__(bool left, int right):
    return __intr_div(int(left),int(right))

@inline
def int __div__(int left, char right):
    return __intr_div(int(left),int(right))

@inline
def int __div__(char left, int right):
    return __intr_div(int(left),int(right))

@inline
def int __div__(int left, int right):
    return __intr_div(int(left),int(right))

@inline
def long __div__(long left, bool right):
    return __intr_div(long(left),long(right))

@inline
def long __div__(bool left, long right):
    return __intr_div(long(left),long(right))

@inline
def long __div__(long left, char right):
    return __intr_div(long(left),long(right))

@inline
def long __div__(char left, long right):
    return __intr_div(long(left),long(right))

@inline
def long __div__(long left, int right):
    return __intr_div(long(left),long(right))

@inline
def long __div__(int left, long right):
    return __intr_div(long(left),long(right))

@inline
def long __div__(long left, long right):
    return __intr_div(long(left),long(right))

@inline
def char __mod__(char left, bool right):
    return __intr_rem(char(left),char(right))

@inline
def char __mod__(bool left, char right):
    return __intr_rem(char(left),char(right))

@inline
def char __mod__(char left, char right):
    return __intr_rem(char(left),char(right))

@inline
def int __mod__(int left, bool right):
    return __intr_rem(int(left),int(right))

@inline
def int __mod__(bool left, int right):
    return __intr_rem(int(left),int(right))

@inline
def int __mod__(int left, char right):
    return __intr_rem(int(left),int(right))

@inline
def int __mod__(char left, int right):
    return __intr_rem(int(left),int(right))

@inline
def int __mod__(int left, int right):
    return __intr_rem(int(left),int(right))

@inline
def long __mod__(long left, bool right):
    return __intr_rem(long(left),long(right))

@inline
def long __mod__(bool left, long right):
    return __intr_rem(long(left),long(right))

@inline
def long __mod__(long left, char right):
    return __intr_rem(long(left),long(right))

@inline
def long __mod__(char left, long right):
    return __intr_rem(long(left),long(right))

@inline
def long __mod__(long left, int right):
    return __intr_rem(long(left),long(right))

@inline
def long __mod__(int left, long right):
    return __intr_rem(long(left),long(right))

@inline
def long __mod__(long left, long right):
    return __intr_rem(long(left),long(right))


@inline
def bool __bitand__(bool left, bool right):
    return __intr_and(bool(left),bool(right))

@inline
def char __bitand__(char left, bool right):
    return __intr_and(char(left),char(right))

@inline
def char __bitand__(bool left, char right):
    return __intr_and(char(left),char(right))

@inline
def char __bitand__(char left, char right):
    return __intr_and(char(left),char(right))

@inline
def int __bitand__(int left, bool right):
    return __intr_and(int(left),int(right))

@inline
def int __bitand__(bool left, int right):
    return __intr_and(int(left),int(right))

@inline
def int __bitand__(int left, char right):
    return __intr_and(int(left),int(right))

@inline
def int __bitand__(char left, int right):
    return __intr_and(int(left),int(right))

@inline
def int __bitand__(int left, int right):
    return __intr_and(int(left),int(right))

@inline
def long __bitand__(long left, bool right):
    return __intr_and(long(left),long(right))

@inline
def long __bitand__(bool left, long right):
    return __intr_and(long(left),long(right))

@inline
def long __bitand__(long left, char right):
    return __intr_and(long(left),long(right))

@inline
def long __bitand__(char left, long right):
    return __intr_and(long(left),long(right))

@inline
def long __bitand__(long left, int right):
    return __intr_and(long(left),long(right))

@inline
def long __bitand__(int left, long right):
    return __intr_and(long(left),long(right))

@inline
def long __bitand__(long left, long right):
    return __intr_and(long(left),long(right))


@inline
def bool __bitor__(bool left, bool right):
    return __intr_or(bool(left),bool(right))

@inline
def char __bitor__(char left, bool right):
    return __intr_or(char(left),char(right))

@inline
def char __bitor__(bool left, char right):
    return __intr_or(char(left),char(right))

@inline
def char __bitor__(char left, char right):
    return __intr_or(char(left),char(right))

@inline
def int __bitor__(int left, bool right):
    return __intr_or(int(left),int(right))

@inline
def int __bitor__(bool left, int right):
    return __intr_or(int(left),int(right))

@inline
def int __bitor__(int left, char right):
    return __intr_or(int(left),int(right))

@inline
def int __bitor__(char left, int right):
    return __intr_or(int(left),int(right))

@inline
def int __bitor__(int left, int right):
    return __intr_or(int(left),int(right))

@inline
def long __bitor__(long left, bool right):
    return __intr_or(long(left),long(right))

@inline
def long __bitor__(bool left, long right):
    return __intr_or(long(left),long(right))

@inline
def long __bitor__(long left, char right):
    return __intr_or(long(left),long(right))

@inline
def long __bitor__(char left, long right):
    return __intr_or(long(left),long(right))

@inline
def long __bitor__(long left, int right):
    return __intr_or(long(left),long(right))

@inline
def long __bitor__(int left, long right):
    return __intr_or(long(left),long(right))

@inline
def long __bitor__(long left, long right):
    return __intr_or(long(left),long(right))


@inline
def bool __bitxor__(bool left, bool right):
    return __intr_xor(bool(left),bool(right))

@inline
def char __bitxor__(char left, bool right):
    return __intr_xor(char(left),char(right))

@inline
def char __bitxor__(bool left, char right):
    return __intr_xor(char(left),char(right))

@inline
def char __bitxor__(char left, char right):
    return __intr_xor(char(left),char(right))

@inline
def int __bitxor__(int left, bool right):
    return __intr_xor(int(left),int(right))

@inline
def int __bitxor__(bool left, int right):
    return __intr_xor(int(left),int(right))

@inline
def int __bitxor__(int left, char right):
    return __intr_xor(int(left),int(right))

@inline
def int __bitxor__(char left, int right):
    return __intr_xor(int(left),int(right))

@inline
def int __bitxor__(int left, int right):
    return __intr_xor(int(left),int(right))

@inline
def long __bitxor__(long left, bool right):
    return __intr_xor(long(left),long(right))

@inline
def long __bitxor__(bool left, long right):
    return __intr_xor(long(left),long(right))

@inline
def long __bitxor__(long left, char right):
    return __intr_xor(long(left),long(right))

@inline
def long __bitxor__(char left, long right):
    return __intr_xor(long(left),long(right))

@inline
def long __bitxor__(long left, int right):
    return __intr_xor(long(left),long(right))

@inline
def long __bitxor__(int left, long right):
    return __intr_xor(long(left),long(right))

@inline
def long __bitxor__(long left, long right):
    return __intr_xor(long(left),long(right))

@inline
def bool __and__(bool left, bool right):
    return __intr_and(left,right)

@inline
def bool __or__(bool left, bool right):
    return __intr_or(left,right)


@inline
def half __add__(half left,int right):
    return __intr_fadd(half(left),half(right))

@inline
def half __add__(int left,half right):
    return __intr_fadd(half(left),half(right))

@inline
def half __add__(half left,long right):
    return __intr_fadd(half(left),half(right))

@inline
def half __add__(long left,half right):
    return __intr_fadd(half(left),half(right))

@inline
def half __add__(half left,half right):
    return __intr_fadd(half(left),half(right))

@inline
def float __add__(float left,int right):
    return __intr_fadd(float(left),float(right))

@inline
def float __add__(int left,float right):
    return __intr_fadd(float(left),float(right))

@inline
def float __add__(float left,long right):
    return __intr_fadd(float(left),float(right))

@inline
def float __add__(long left,float right):
    return __intr_fadd(float(left),float(right))

@inline
def float __add__(float left,float right):
    return __intr_fadd(float(left),float(right))

@inline
def float __add__(float left,half right):
    return __intr_fadd(float(left),float(right))

@inline
def float __add__(half left,float right):
    return __intr_fadd(float(left),float(right))

@inline
def double __add__(double left,int right):
    return __intr_fadd(double(left),double(right))

@inline
def double __add__(int left,double right):
    return __intr_fadd(double(left),double(right))

@inline
def double __add__(double left,long right):
    return __intr_fadd(double(left),double(right))

@inline
def double __add__(long left,double right):
    return __intr_fadd(double(left),double(right))

@inline
def double __add__(double left,double right):
    return __intr_fadd(double(left),double(right))

@inline
def double __add__(double left,half right):
    return __intr_fadd(double(left),double(right))

@inline
def double __add__(half left,double right):
    return __intr_fadd(double(left),double(right))

@inline
def double __add__(double left,float right):
    return __intr_fadd(double(left),double(right))

@inline
def double __add__(float left,double right):
    return __intr_fadd(double(left),double(right))


@inline
def half __sub__(half left,int right):
    return __intr_fsub(half(left),half(right))

@inline
def half __sub__(int left,half right):
    return __intr_fsub(half(left),half(right))

@inline
def half __sub__(half left,long right):
    return __intr_fsub(half(left),half(right))

@inline
def half __sub__(long left,half right):
    return __intr_fsub(half(left),half(right))

@inline
def half __sub__(half left,half right):
    return __intr_fsub(half(left),half(right))

@inline
def float __sub__(float left,int right):
    return __intr_fsub(float(left),float(right))

@inline
def float __sub__(int left,float right):
    return __intr_fsub(float(left),float(right))

@inline
def float __sub__(float left,long right):
    return __intr_fsub(float(left),float(right))

@inline
def float __sub__(long left,float right):
    return __intr_fsub(float(left),float(right))

@inline
def float __sub__(float left,float right):
    return __intr_fsub(float(left),float(right))

@inline
def float __sub__(float left,half right):
    return __intr_fsub(float(left),float(right))

@inline
def float __sub__(half left,float right):
    return __intr_fsub(float(left),float(right))

@inline
def double __sub__(double left,int right):
    return __intr_fsub(double(left),double(right))

@inline
def double __sub__(int left,double right):
    return __intr_fsub(double(left),double(right))

@inline
def double __sub__(double left,long right):
    return __intr_fsub(double(left),double(right))

@inline
def double __sub__(long left,double right):
    return __intr_fsub(double(left),double(right))

@inline
def double __sub__(double left,double right):
    return __intr_fsub(double(left),double(right))

@inline
def double __sub__(double left,half right):
    return __intr_fsub(double(left),double(right))

@inline
def double __sub__(half left,double right):
    return __intr_fsub(double(left),double(right))

@inline
def double __sub__(double left,float right):
    return __intr_fsub(double(left),double(right))

@inline
def double __sub__(float left,double right):
    return __intr_fsub(double(left),double(right))


@inline
def half __mul__(half left,int right):
    return __intr_fmul(half(left),half(right))

@inline
def half __mul__(int left,half right):
    return __intr_fmul(half(left),half(right))

@inline
def half __mul__(half left,long right):
    return __intr_fmul(half(left),half(right))

@inline
def half __mul__(long left,half right):
    return __intr_fmul(half(left),half(right))

@inline
def half __mul__(half left,half right):
    return __intr_fmul(half(left),half(right))

@inline
def float __mul__(float left,int right):
    return __intr_fmul(float(left),float(right))

@inline
def float __mul__(int left,float right):
    return __intr_fmul(float(left),float(right))

@inline
def float __mul__(float left,long right):
    return __intr_fmul(float(left),float(right))

@inline
def float __mul__(long left,float right):
    return __intr_fmul(float(left),float(right))

@inline
def float __mul__(float left,float right):
    return __intr_fmul(float(left),float(right))

@inline
def float __mul__(float left,half right):
    return __intr_fmul(float(left),float(right))

@inline
def float __mul__(half left,float right):
    return __intr_fmul(float(left),float(right))

@inline
def double __mul__(double left,int right):
    return __intr_fmul(double(left),double(right))

@inline
def double __mul__(int left,double right):
    return __intr_fmul(double(left),double(right))

@inline
def double __mul__(double left,long right):
    return __intr_fmul(double(left),double(right))

@inline
def double __mul__(long left,double right):
    return __intr_fmul(double(left),double(right))

@inline
def double __mul__(double left,double right):
    return __intr_fmul(double(left),double(right))

@inline
def double __mul__(double left,half right):
    return __intr_fmul(double(left),double(right))

@inline
def double __mul__(half left,double right):
    return __intr_fmul(double(left),double(right))

@inline
def double __mul__(double left,float right):
    return __intr_fmul(double(left),double(right))

@inline
def double __mul__(float left,double right):
    return __intr_fmul(double(left),double(right))


@inline
def half __div__(half left,int right):
    return __intr_fdiv(half(left),half(right))

@inline
def half __div__(int left,half right):
    return __intr_fdiv(half(left),half(right))

@inline
def half __div__(half left,long right):
    return __intr_fdiv(half(left),half(right))

@inline
def half __div__(long left,half right):
    return __intr_fdiv(half(left),half(right))

@inline
def half __div__(half left,half right):
    return __intr_fdiv(half(left),half(right))

@inline
def float __div__(float left,int right):
    return __intr_fdiv(float(left),float(right))

@inline
def float __div__(int left,float right):
    return __intr_fdiv(float(left),float(right))

@inline
def float __div__(float left,long right):
    return __intr_fdiv(float(left),float(right))

@inline
def float __div__(long left,float right):
    return __intr_fdiv(float(left),float(right))

@inline
def float __div__(float left,float right):
    return __intr_fdiv(float(left),float(right))

@inline
def float __div__(float left,half right):
    return __intr_fdiv(float(left),float(right))

@inline
def float __div__(half left,float right):
    return __intr_fdiv(float(left),float(right))

@inline
def double __div__(double left,int right):
    return __intr_fdiv(double(left),double(right))

@inline
def double __div__(int left,double right):
    return __intr_fdiv(double(left),double(right))

@inline
def double __div__(double left,long right):
    return __intr_fdiv(double(left),double(right))

@inline
def double __div__(long left,double right):
    return __intr_fdiv(double(left),double(right))

@inline
def double __div__(double left,double right):
    return __intr_fdiv(double(left),double(right))

@inline
def double __div__(double left,half right):
    return __intr_fdiv(double(left),double(right))

@inline
def double __div__(half left,double right):
    return __intr_fdiv(double(left),double(right))

@inline
def double __div__(double left,float right):
    return __intr_fdiv(double(left),double(right))

@inline
def double __div__(float left,double right):
    return __intr_fdiv(double(left),double(right))


@inline
def half __mod__(half left,int right):
    return __intr_frem(half(left),half(right))

@inline
def half __mod__(int left,half right):
    return __intr_frem(half(left),half(right))

@inline
def half __mod__(half left,long right):
    return __intr_frem(half(left),half(right))

@inline
def half __mod__(long left,half right):
    return __intr_frem(half(left),half(right))

@inline
def half __mod__(half left,half right):
    return __intr_frem(half(left),half(right))

@inline
def float __mod__(float left,int right):
    return __intr_frem(float(left),float(right))

@inline
def float __mod__(int left,float right):
    return __intr_frem(float(left),float(right))

@inline
def float __mod__(float left,long right):
    return __intr_frem(float(left),float(right))

@inline
def float __mod__(long left,float right):
    return __intr_frem(float(left),float(right))

@inline
def float __mod__(float left,float right):
    return __intr_frem(float(left),float(right))

@inline
def float __mod__(float left,half right):
    return __intr_frem(float(left),float(right))

@inline
def float __mod__(half left,float right):
    return __intr_frem(float(left),float(right))

@inline
def double __mod__(double left,int right):
    return __intr_frem(double(left),double(right))

@inline
def double __mod__(int left,double right):
    return __intr_frem(double(left),double(right))

@inline
def double __mod__(double left,long right):
    return __intr_frem(double(left),double(right))

@inline
def double __mod__(long left,double right):
    return __intr_frem(double(left),double(right))

@inline
def double __mod__(double left,double right):
    return __intr_frem(double(left),double(right))

@inline
def double __mod__(double left,half right):
    return __intr_frem(double(left),double(right))

@inline
def double __mod__(half left,double right):
    return __intr_frem(double(left),double(right))

@inline
def double __mod__(double left,float right):
    return __intr_frem(double(left),double(right))

@inline
def double __mod__(float left,double right):
    return __intr_frem(double(left),double(right))

@inline
def char __neg__(char val):
    return __intr_neg(val)

@inline
def int __neg__(int val):
    return __intr_neg(val)

@inline
def long __neg__(long val):
    return __intr_neg(val)

@inline
def half __neg__(half val):
    return __intr_fneg(val)

@inline
def float __neg__(float val):
    return __intr_fneg(val)

@inline
def double __neg__(double val):
    return __intr_fneg(val)

@inline
def bool __bitnot__(bool val):
    return __intr_not(val)

@inline
def char __bitnot__(char val):
    return __intr_not(val)

@inline
def int __bitnot__(int val):
    return __intr_not(val)

@inline
def long __bitnot__(long val):
    return __intr_not(val)

@inline
def bool __not__(bool val):
    return __intr_not(val)

@inline
def bool __eq__(bool left, bool right):
    return __intr_cmp(==,left,right)


@inline
def bool __eq__(char left, bool right):
    return __intr_cmp(==,char(left),char(right))

@inline
def bool __eq__(bool left, char right):
    return __intr_cmp(==,char(left),char(right))

@inline
def bool __eq__(char left, char right):
    return __intr_cmp(==,char(left),char(right))


@inline
def bool __eq__(int left, bool right):
    return __intr_cmp(==,int(left),int(right))

@inline
def bool __eq__(bool left, int right):
    return __intr_cmp(==,int(left),int(right))

@inline
def bool __eq__(int left, char right):
    return __intr_cmp(==,int(left),int(right))

@inline
def bool __eq__(char left, int right):
    return __intr_cmp(==,int(left),int(right))

@inline
def bool __eq__(int left, int right):
    return __intr_cmp(==,int(left),int(right))


@inline
def bool __eq__(long left, bool right):
    return __intr_cmp(==,long(left),long(right))

@inline
def bool __eq__(bool left, long right):
    return __intr_cmp(==,long(left),long(right))

@inline
def bool __eq__(long left, char right):
    return __intr_cmp(==,long(left),long(right))

@inline
def bool __eq__(char left, long right):
    return __intr_cmp(==,long(left),long(right))

@inline
def bool __eq__(long left, int right):
    return __intr_cmp(==,long(left),long(right))

@inline
def bool __eq__(int left, long right):
    return __intr_cmp(==,long(left),long(right))

@inline
def bool __eq__(long left, long right):
    return __intr_cmp(==,long(left),long(right))


@inline
def bool __eq__(half left, int right):
    return __intr_fcmp(==,half(left),half(right))

@inline
def bool __eq__(int left, half right):
    return __intr_fcmp(==,half(left),half(right))

@inline
def bool __eq__(half left, long right):
    return __intr_fcmp(==,half(left),half(right))

@inline
def bool __eq__(long left, half right):
    return __intr_fcmp(==,half(left),half(right))


@inline
def bool __eq__(float left, int right):
    return __intr_fcmp(==,float(left),float(right))

@inline
def bool __eq__(int left, float right):
    return __intr_fcmp(==,float(left),float(right))

@inline
def bool __eq__(float left, long right):
    return __intr_fcmp(==,float(left),float(right))

@inline
def bool __eq__(long left, float right):
    return __intr_fcmp(==,float(left),float(right))

@inline
def bool __eq__(float left, half right):
    return __intr_fcmp(==,float(left),float(right))

@inline
def bool __eq__(half left, float right):
    return __intr_fcmp(==,float(left),float(right))

@inline
def bool __eq__(float left, float right):
    return __intr_fcmp(==,float(left),float(right))


@inline
def bool __eq__(double left, int right):
    return __intr_fcmp(==,double(left),double(right))

@inline
def bool __eq__(int left, double right):
    return __intr_fcmp(==,double(left),double(right))

@inline
def bool __eq__(double left, long right):
    return __intr_fcmp(==,double(left),double(right))

@inline
def bool __eq__(long left, double right):
    return __intr_fcmp(==,double(left),double(right))

@inline
def bool __eq__(double left, half right):
    return __intr_fcmp(==,double(left),double(right))

@inline
def bool __eq__(half left, double right):
    return __intr_fcmp(==,double(left),double(right))

@inline
def bool __eq__(double left, float right):
    return __intr_fcmp(==,double(left),double(right))

@inline
def bool __eq__(float left, double right):
    return __intr_fcmp(==,double(left),double(right))

@inline
def bool __eq__(double left, double right):
    return __intr_fcmp(==,double(left),double(right))





@inline
def bool __neq__(bool left, bool right):
    return __intr_cmp(!=,left,right)


@inline
def bool __neq__(char left, bool right):
    return __intr_cmp(!=,char(left),char(right))

@inline
def bool __neq__(bool left, char right):
    return __intr_cmp(!=,char(left),char(right))

@inline
def bool __neq__(char left, char right):
    return __intr_cmp(!=,char(left),char(right))


@inline
def bool __neq__(int left, bool right):
    return __intr_cmp(!=,int(left),int(right))

@inline
def bool __neq__(bool left, int right):
    return __intr_cmp(!=,int(left),int(right))

@inline
def bool __neq__(int left, char right):
    return __intr_cmp(!=,int(left),int(right))

@inline
def bool __neq__(char left, int right):
    return __intr_cmp(!=,int(left),int(right))

@inline
def bool __neq__(int left, int right):
    return __intr_cmp(!=,int(left),int(right))


@inline
def bool __neq__(long left, bool right):
    return __intr_cmp(!=,long(left),long(right))

@inline
def bool __neq__(bool left, long right):
    return __intr_cmp(!=,long(left),long(right))

@inline
def bool __neq__(long left, char right):
    return __intr_cmp(!=,long(left),long(right))

@inline
def bool __neq__(char left, long right):
    return __intr_cmp(!=,long(left),long(right))

@inline
def bool __neq__(long left, int right):
    return __intr_cmp(!=,long(left),long(right))

@inline
def bool __neq__(int left, long right):
    return __intr_cmp(!=,long(left),long(right))

@inline
def bool __neq__(long left, long right):
    return __intr_cmp(!=,long(left),long(right))


@inline
def bool __neq__(half left, int right):
    return __intr_fcmp(!=,half(left),half(right))

@inline
def bool __neq__(int left, half right):
    return __intr_fcmp(!=,half(left),half(right))

@inline
def bool __neq__(half left, long right):
    return __intr_fcmp(!=,half(left),half(right))

@inline
def bool __neq__(long left, half right):
    return __intr_fcmp(!=,half(left),half(right))


@inline
def bool __neq__(float left, int right):
    return __intr_fcmp(!=,float(left),float(right))

@inline
def bool __neq__(int left, float right):
    return __intr_fcmp(!=,float(left),float(right))

@inline
def bool __neq__(float left, long right):
    return __intr_fcmp(!=,float(left),float(right))

@inline
def bool __neq__(long left, float right):
    return __intr_fcmp(!=,float(left),float(right))

@inline
def bool __neq__(float left, half right):
    return __intr_fcmp(!=,float(left),float(right))

@inline
def bool __neq__(half left, float right):
    return __intr_fcmp(!=,float(left),float(right))

@inline
def bool __neq__(float left, float right):
    return __intr_fcmp(!=,float(left),float(right))


@inline
def bool __neq__(double left, int right):
    return __intr_fcmp(!=,double(left),double(right))

@inline
def bool __neq__(int left, double right):
    return __intr_fcmp(!=,double(left),double(right))

@inline
def bool __neq__(double left, long right):
    return __intr_fcmp(!=,double(left),double(right))

@inline
def bool __neq__(long left, double right):
    return __intr_fcmp(!=,double(left),double(right))

@inline
def bool __neq__(double left, half right):
    return __intr_fcmp(!=,double(left),double(right))

@inline
def bool __neq__(half left, double right):
    return __intr_fcmp(!=,double(left),double(right))

@inline
def bool __neq__(double left, float right):
    return __intr_fcmp(!=,double(left),double(right))

@inline
def bool __neq__(float left, double right):
    return __intr_fcmp(!=,double(left),double(right))

@inline
def bool __neq__(double left, double right):
    return __intr_fcmp(!=,double(left),double(right))





@inline
def bool __gr__(bool left, bool right):
    return __intr_cmp(>,left,right)


@inline
def bool __gr__(char left, bool right):
    return __intr_cmp(>,char(left),char(right))

@inline
def bool __gr__(bool left, char right):
    return __intr_cmp(>,char(left),char(right))

@inline
def bool __gr__(char left, char right):
    return __intr_cmp(>,char(left),char(right))


@inline
def bool __gr__(int left, bool right):
    return __intr_cmp(>,int(left),int(right))

@inline
def bool __gr__(bool left, int right):
    return __intr_cmp(>,int(left),int(right))

@inline
def bool __gr__(int left, char right):
    return __intr_cmp(>,int(left),int(right))

@inline
def bool __gr__(char left, int right):
    return __intr_cmp(>,int(left),int(right))

@inline
def bool __gr__(int left, int right):
    return __intr_cmp(>,int(left),int(right))


@inline
def bool __gr__(long left, bool right):
    return __intr_cmp(>,long(left),long(right))

@inline
def bool __gr__(bool left, long right):
    return __intr_cmp(>,long(left),long(right))

@inline
def bool __gr__(long left, char right):
    return __intr_cmp(>,long(left),long(right))

@inline
def bool __gr__(char left, long right):
    return __intr_cmp(>,long(left),long(right))

@inline
def bool __gr__(long left, int right):
    return __intr_cmp(>,long(left),long(right))

@inline
def bool __gr__(int left, long right):
    return __intr_cmp(>,long(left),long(right))

@inline
def bool __gr__(long left, long right):
    return __intr_cmp(>,long(left),long(right))


@inline
def bool __gr__(half left, int right):
    return __intr_fcmp(>,half(left),half(right))

@inline
def bool __gr__(int left, half right):
    return __intr_fcmp(>,half(left),half(right))

@inline
def bool __gr__(half left, long right):
    return __intr_fcmp(>,half(left),half(right))

@inline
def bool __gr__(long left, half right):
    return __intr_fcmp(>,half(left),half(right))


@inline
def bool __gr__(float left, int right):
    return __intr_fcmp(>,float(left),float(right))

@inline
def bool __gr__(int left, float right):
    return __intr_fcmp(>,float(left),float(right))

@inline
def bool __gr__(float left, long right):
    return __intr_fcmp(>,float(left),float(right))

@inline
def bool __gr__(long left, float right):
    return __intr_fcmp(>,float(left),float(right))

@inline
def bool __gr__(float left, half right):
    return __intr_fcmp(>,float(left),float(right))

@inline
def bool __gr__(half left, float right):
    return __intr_fcmp(>,float(left),float(right))

@inline
def bool __gr__(float left, float right):
    return __intr_fcmp(>,float(left),float(right))


@inline
def bool __gr__(double left, int right):
    return __intr_fcmp(>,double(left),double(right))

@inline
def bool __gr__(int left, double right):
    return __intr_fcmp(>,double(left),double(right))

@inline
def bool __gr__(double left, long right):
    return __intr_fcmp(>,double(left),double(right))

@inline
def bool __gr__(long left, double right):
    return __intr_fcmp(>,double(left),double(right))

@inline
def bool __gr__(double left, half right):
    return __intr_fcmp(>,double(left),double(right))

@inline
def bool __gr__(half left, double right):
    return __intr_fcmp(>,double(left),double(right))

@inline
def bool __gr__(double left, float right):
    return __intr_fcmp(>,double(left),double(right))

@inline
def bool __gr__(float left, double right):
    return __intr_fcmp(>,double(left),double(right))

@inline
def bool __gr__(double left, double right):
    return __intr_fcmp(>,double(left),double(right))





@inline
def bool __ls__(bool left, bool right):
    return __intr_cmp(<,left,right)


@inline
def bool __ls__(char left, bool right):
    return __intr_cmp(<,char(left),char(right))

@inline
def bool __ls__(bool left, char right):
    return __intr_cmp(<,char(left),char(right))

@inline
def bool __ls__(char left, char right):
    return __intr_cmp(<,char(left),char(right))


@inline
def bool __ls__(int left, bool right):
    return __intr_cmp(<,int(left),int(right))

@inline
def bool __ls__(bool left, int right):
    return __intr_cmp(<,int(left),int(right))

@inline
def bool __ls__(int left, char right):
    return __intr_cmp(<,int(left),int(right))

@inline
def bool __ls__(char left, int right):
    return __intr_cmp(<,int(left),int(right))

@inline
def bool __ls__(int left, int right):
    return __intr_cmp(<,int(left),int(right))


@inline
def bool __ls__(long left, bool right):
    return __intr_cmp(<,long(left),long(right))

@inline
def bool __ls__(bool left, long right):
    return __intr_cmp(<,long(left),long(right))

@inline
def bool __ls__(long left, char right):
    return __intr_cmp(<,long(left),long(right))

@inline
def bool __ls__(char left, long right):
    return __intr_cmp(<,long(left),long(right))

@inline
def bool __ls__(long left, int right):
    return __intr_cmp(<,long(left),long(right))

@inline
def bool __ls__(int left, long right):
    return __intr_cmp(<,long(left),long(right))

@inline
def bool __ls__(long left, long right):
    return __intr_cmp(<,long(left),long(right))


@inline
def bool __ls__(half left, int right):
    return __intr_fcmp(<,half(left),half(right))

@inline
def bool __ls__(int left, half right):
    return __intr_fcmp(<,half(left),half(right))

@inline
def bool __ls__(half left, long right):
    return __intr_fcmp(<,half(left),half(right))

@inline
def bool __ls__(long left, half right):
    return __intr_fcmp(<,half(left),half(right))


@inline
def bool __ls__(float left, int right):
    return __intr_fcmp(<,float(left),float(right))

@inline
def bool __ls__(int left, float right):
    return __intr_fcmp(<,float(left),float(right))

@inline
def bool __ls__(float left, long right):
    return __intr_fcmp(<,float(left),float(right))

@inline
def bool __ls__(long left, float right):
    return __intr_fcmp(<,float(left),float(right))

@inline
def bool __ls__(float left, half right):
    return __intr_fcmp(<,float(left),float(right))

@inline
def bool __ls__(half left, float right):
    return __intr_fcmp(<,float(left),float(right))

@inline
def bool __ls__(float left, float right):
    return __intr_fcmp(<,float(left),float(right))


@inline
def bool __ls__(double left, int right):
    return __intr_fcmp(<,double(left),double(right))

@inline
def bool __ls__(int left, double right):
    return __intr_fcmp(<,double(left),double(right))

@inline
def bool __ls__(double left, long right):
    return __intr_fcmp(<,double(left),double(right))

@inline
def bool __ls__(long left, double right):
    return __intr_fcmp(<,double(left),double(right))

@inline
def bool __ls__(double left, half right):
    return __intr_fcmp(<,double(left),double(right))

@inline
def bool __ls__(half left, double right):
    return __intr_fcmp(<,double(left),double(right))

@inline
def bool __ls__(double left, float right):
    return __intr_fcmp(<,double(left),double(right))

@inline
def bool __ls__(float left, double right):
    return __intr_fcmp(<,double(left),double(right))

@inline
def bool __ls__(double left, double right):
    return __intr_fcmp(<,double(left),double(right))




@inline
def bool __geq__(bool left, bool right):
    return __intr_cmp(>=,left,right)



@inline
def bool __geq__(char left, bool right):
    return __intr_cmp(>=,char(left),char(right))

@inline
def bool __geq__(bool left, char right):
    return __intr_cmp(>=,char(left),char(right))

@inline
def bool __geq__(char left, char right):
    return __intr_cmp(>=,char(left),char(right))


@inline
def bool __geq__(int left, bool right):
    return __intr_cmp(>=,int(left),int(right))

@inline
def bool __geq__(bool left, int right):
    return __intr_cmp(>=,int(left),int(right))

@inline
def bool __geq__(int left, char right):
    return __intr_cmp(>=,int(left),int(right))

@inline
def bool __geq__(char left, int right):
    return __intr_cmp(>=,int(left),int(right))

@inline
def bool __geq__(int left, int right):
    return __intr_cmp(>=,int(left),int(right))


@inline
def bool __geq__(long left, bool right):
    return __intr_cmp(>=,long(left),long(right))

@inline
def bool __geq__(bool left, long right):
    return __intr_cmp(>=,long(left),long(right))

@inline
def bool __geq__(long left, char right):
    return __intr_cmp(>=,long(left),long(right))

@inline
def bool __geq__(char left, long right):
    return __intr_cmp(>=,long(left),long(right))

@inline
def bool __geq__(long left, int right):
    return __intr_cmp(>=,long(left),long(right))

@inline
def bool __geq__(int left, long right):
    return __intr_cmp(>=,long(left),long(right))

@inline
def bool __geq__(long left, long right):
    return __intr_cmp(>=,long(left),long(right))


@inline
def bool __geq__(half left, int right):
    return __intr_fcmp(>=,half(left),half(right))

@inline
def bool __geq__(int left, half right):
    return __intr_fcmp(>=,half(left),half(right))

@inline
def bool __geq__(half left, long right):
    return __intr_fcmp(>=,half(left),half(right))

@inline
def bool __geq__(long left, half right):
    return __intr_fcmp(>=,half(left),half(right))


@inline
def bool __geq__(float left, int right):
    return __intr_fcmp(>=,float(left),float(right))

@inline
def bool __geq__(int left, float right):
    return __intr_fcmp(>=,float(left),float(right))

@inline
def bool __geq__(float left, long right):
    return __intr_fcmp(>=,float(left),float(right))

@inline
def bool __geq__(long left, float right):
    return __intr_fcmp(>=,float(left),float(right))

@inline
def bool __geq__(float left, half right):
    return __intr_fcmp(>=,float(left),float(right))

@inline
def bool __geq__(half left, float right):
    return __intr_fcmp(>=,float(left),float(right))

@inline
def bool __geq__(float left, float right):
    return __intr_fcmp(>=,float(left),float(right))


@inline
def bool __geq__(double left, int right):
    return __intr_fcmp(>=,double(left),double(right))

@inline
def bool __geq__(int left, double right):
    return __intr_fcmp(>=,double(left),double(right))

@inline
def bool __geq__(double left, long right):
    return __intr_fcmp(>=,double(left),double(right))

@inline
def bool __geq__(long left, double right):
    return __intr_fcmp(>=,double(left),double(right))

@inline
def bool __geq__(double left, half right):
    return __intr_fcmp(>=,double(left),double(right))

@inline
def bool __geq__(half left, double right):
    return __intr_fcmp(>=,double(left),double(right))

@inline
def bool __geq__(double left, float right):
    return __intr_fcmp(>=,double(left),double(right))

@inline
def bool __geq__(float left, double right):
    return __intr_fcmp(>=,double(left),double(right))

@inline
def bool __geq__(double left, double right):
    return __intr_fcmp(>=,double(left),double(right))




@inline
def bool __leq__(bool left, bool right):
    return __intr_cmp(<=,left,right)


@inline
def bool __leq__(char left, bool right):
    return __intr_cmp(<=,char(left),char(right))

@inline
def bool __leq__(bool left, char right):
    return __intr_cmp(<=,char(left),char(right))

@inline
def bool __leq__(char left, char right):
    return __intr_cmp(<=,char(left),char(right))


@inline
def bool __leq__(int left, bool right):
    return __intr_cmp(<=,int(left),int(right))

@inline
def bool __leq__(bool left, int right):
    return __intr_cmp(<=,int(left),int(right))

@inline
def bool __leq__(int left, char right):
    return __intr_cmp(<=,int(left),int(right))

@inline
def bool __leq__(char left, int right):
    return __intr_cmp(<=,int(left),int(right))

@inline
def bool __leq__(int left, int right):
    return __intr_cmp(<=,int(left),int(right))


@inline
def bool __leq__(long left, bool right):
    return __intr_cmp(<=,long(left),long(right))

@inline
def bool __leq__(bool left, long right):
    return __intr_cmp(<=,long(left),long(right))

@inline
def bool __leq__(long left, char right):
    return __intr_cmp(<=,long(left),long(right))

@inline
def bool __leq__(char left, long right):
    return __intr_cmp(<=,long(left),long(right))

@inline
def bool __leq__(long left, int right):
    return __intr_cmp(<=,long(left),long(right))

@inline
def bool __leq__(int left, long right):
    return __intr_cmp(<=,long(left),long(right))

@inline
def bool __leq__(long left, long right):
    return __intr_cmp(<=,long(left),long(right))


@inline
def bool __leq__(half left, int right):
    return __intr_fcmp(<=,half(left),half(right))

@inline
def bool __leq__(int left, half right):
    return __intr_fcmp(<=,half(left),half(right))

@inline
def bool __leq__(half left, long right):
    return __intr_fcmp(<=,half(left),half(right))

@inline
def bool __leq__(long left, half right):
    return __intr_fcmp(<=,half(left),half(right))


@inline
def bool __leq__(float left, int right):
    return __intr_fcmp(<=,float(left),float(right))

@inline
def bool __leq__(int left, float right):
    return __intr_fcmp(<=,float(left),float(right))

@inline
def bool __leq__(float left, long right):
    return __intr_fcmp(<=,float(left),float(right))

@inline
def bool __leq__(long left, float right):
    return __intr_fcmp(<=,float(left),float(right))

@inline
def bool __leq__(float left, half right):
    return __intr_fcmp(<=,float(left),float(right))

@inline
def bool __leq__(half left, float right):
    return __intr_fcmp(<=,float(left),float(right))

@inline
def bool __leq__(float left, float right):
    return __intr_fcmp(<=,float(left),float(right))


@inline
def bool __leq__(double left, int right):
    return __intr_fcmp(<=,double(left),double(right))

@inline
def bool __leq__(int left, double right):
    return __intr_fcmp(<=,double(left),double(right))

@inline
def bool __leq__(double left, long right):
    return __intr_fcmp(<=,double(left),double(right))

@inline
def bool __leq__(long left, double right):
    return __intr_fcmp(<=,double(left),double(right))

@inline
def bool __leq__(double left, half right):
    return __intr_fcmp(<=,double(left),double(right))

@inline
def bool __leq__(half left, double right):
    return __intr_fcmp(<=,double(left),double(right))

@inline
def bool __leq__(double left, float right):
    return __intr_fcmp(<=,double(left),double(right))

@inline
def bool __leq__(float left, double right):
    return __intr_fcmp(<=,double(left),double(right))

@inline
def bool __leq__(double left, double right):
    return __intr_fcmp(<=,double(left),double(right))

@inline
def void __print__(bool val):
    if val == True:
        __intr_oup("True")
    else:
        __intr_oup("False")

@inline
def void __print__(char val):
    __intr_oup("%c",val)

@inline
def void __print__(int val):
    __intr_oup("%d",val)

@inline
def void __print__(long val):
    __intr_oup("%ld",val)

@inline
def void __print__(half val):
    __intr_oup("%f",float(val))

@inline
def void __print__(float val):
    __intr_oup("%f",val)

@inline
def void __print__(double val):
    __intr_oup("%f",val)