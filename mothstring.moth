class str:
    char* raw
    int _len
    int __itercount

    def void __print__(str self):
        __intr_oup("%s",self.raw)

    @inline
    def int len(str self):
        return self._len

    def char* __index__(str self, int* index, int n):
        return __intr_itop(__intr_ptoi(self.raw,long) + long(__intr_gep(index,0) * sizeof(char)),char*)

    def void __iterget__(str self):
        self.__itercount = 0

    def bool __itercheck__(str self):
        return (self.__itercount < self._len)

    def char __iternext__(str self):
        char out = self[self.__itercount]
        self.__itercount = self.__itercount + 1
        return out

    def void __init__(str self, char* init):
        self.raw = init
        self._len = __strlen(init)

def int len(str val):
    return val._len

def str __add__(str left, str right):
    int new_len = left.len() + right.len() + 1
    char* new_raw = alloc(sizeof(char)*new_len)
    int count = 0
    for char i in left:
        __intr_gep(new_raw,count) = i
        count = count + 1
    for char i in right:
        __intr_gep(new_raw,count) = i
        count = count + 1
    __intr_gep(new_raw,count) = right[right.len()]
    return new str(new_raw)

def cast str(char* raw):
    int strlen = __strlen(raw)
    char* new_raw = alloc((strlen+1)*sizeof(char))
    for int i in range(strlen+1):
        __intr_gep(new_raw,i) = char(__intr_gep(raw,i))
    str out = new str(new_raw)
    return out

def cast str(char raw):
    char* new_raw = alloc(2*sizeof(char))
    __intr_gep(new_raw,0) = raw
    __intr_gep(new_raw,1) = '\0'
    return new str(new_raw)

def void __print__(char* raw_str):
    __intr_oup("%s",raw_str)

def bool __eq__(str left, str right):
    if left.len() != right.len():
        return False
    for int i in range(left.len()):
        if left[i] != right[i]:
            return False
    return True

def bool __eq__(str left, char* _right):
    str right = str(_right)
    if left.len() != right.len():
        return False
    for int i in range(left.len()):
        if left[i] != right[i]:
            return False
    return True

def bool __eq__(char* _left, str right):
    str left = str(_left)
    if left.len() != right.len():
        return False
    for int i in range(left.len()):
        if left[i] != right[i]:
            return False
    return True

def bool __eq__(char* _left, char* _right):
    str left = str(_left)
    str right = str(_right)
    if left.len() != right.len():
        return False
    for int i in range(left.len()):
        if left[i] != right[i]:
            return False
    return True

def bool __neq__(str left, str right):
    if left.len() != right.len():
        return True
    for int i in range(left.len()):
        if left[i] != right[i]:
            return True
    return False

def bool __neq__(str left, char* _right):
    str right = str(_right)
    if left.len() != right.len():
        return True
    for int i in range(left.len()):
        if left[i] != right[i]:
            return True
    return False

def bool __neq__(char* _left, str right):
    str left = str(_left)
    if left.len() != right.len():
        return True
    for int i in range(left.len()):
        if left[i] != right[i]:
            return True
    return False

def bool __neq__(char* _left, char* _right):
    str left = str(_left)
    str right = str(_right)
    if left.len() != right.len():
        return True
    for int i in range(left.len()):
        if left[i] != right[i]:
            return True
    return False